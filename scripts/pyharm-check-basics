#!/usr/bin/env python3

import click
import psutil
from functools import partial

import numpy as np

import pyharm
from pyharm.parallel import map_parallel

def check_dump_properties(name, check_all, check_divb, allowed_divb):
    dump = pyharm.load_dump(name)
    retcode = 0

    if check_divb or check_all:
        not_tested_divb = 0
        for var,desc in [('divB', 'from file'),
                         ('divB_prims', 'from primitive vars'),
                         ('divB_cons', 'from conserved vars')]:
            try:
                max_divb = np.max(dump[var])
                print("Maximum divB {} is {}".format(desc, max_divb))
                if max_divb > allowed_divb or np.isnan(max_divb):
                    print("Value too high! Returning error.")
                    retcode = 1
            except Exception:
                print("Did not test divB {}!".format(desc))
                not_tested_divb += 1

        if not_tested_divb >= 3:
            print("Could not test divB!  Returning error.")
            retcode = -1

    del dump
    return retcode

@click.command()
@click.argument('files', nargs=-1)
# Common options
@click.option('-nt', '--nthreads', default=None, help="Number of parallel conversions -- defaults to min(nprocs, 64)")
@click.option('-d', '--debug', is_flag=True, help="Serial operation for debugging")
# Checks
@click.option('-all', '--check_all', default=False, help="Perform all checks")
@click.option('-divb', '--check_divb', default=True, help="Check magnetic field divergence")
@click.option('--allowed_divb', default=1e-9, help="Maximum allowable field divergence")
def convert(files, debug, nthreads, **kwargs):
    """Check basic properties which should be true of a GRMHD file, and return a code
    if it fails.

    Currently limited to magnetic field divergence, lack of NaN, 

    Future possibilities: 
    """

    if debug:
        check_results = [] 
        for file in files:
            check_results.append(check_dump_properties(file, **kwargs))
    else:
        if nthreads is None:
            nthreads = min(min(psutil.cpu_count(), len(files)), 32)
        else:
            nthreads = int(nthreads)

        convert_func = partial(check_dump_properties, **kwargs)

        print("Checking {} files with {} threads".format(len(files), nthreads))
        check_results = map_parallel(convert_func, files, nprocs=nthreads)
        print("Checked all files.")
    # Return first nonzero exit code
    checks_array = np.array(check_results)
    if np.any(checks_array):
        exit(checks_array[np.nonzero(checks_array)].flatten()[0])
    else:
        exit(0)

if __name__ == "__main__":
    convert()
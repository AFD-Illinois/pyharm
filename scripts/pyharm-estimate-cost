#!/usr/bin/env python3

# Script to calculate how many zone-cycles are required to complete a simulation
# Usage: ./how_many_cycles.py n1 n2 n3 tf [nnodes [spin r_out system]]

import sys
import numpy as np
import click

import pyharm.grid as grid

# TODO add multizone, new

# ZCPS Estimates, Summit.
def kharma_perf_summit(zones_per_node, nodes):
    return min(np.power(zones_per_node, 1/3)*15e6/150, 16e6)*nodes
def grim_perf_summit(zones_per_node, nodes):
    return min(np.power(zones_per_node, 1/3)*4.1e5/64, 4.1e5)*nodes

@click.command()
@click.option('-n1', '--n1', default=384, help="Grid size")
@click.option('-n2', '--n2', default=384, help="Grid size")
@click.option('-n3', '--n3', default=384, help="Grid size")
@click.option('-tf', '--time', default=10000, help="Simulation time in t_g")
@click.option('-n', '--nodes', default=1, help="Number of nodes performing simulation")
@click.option('-c', '--coords', default='fmks', help="Grid coordinate system")
@click.option('--r_out', default=1000., help="Simulation outer radius")
@click.option('-a', '--spin', default=0.5, help="BH spin a_*")
def estimate_cost(n1, n2, n3, time, nodes, coords, spin, r_out):
    """Script to calculate how many zone-cycles are required to complete a simulation

    Usage: pyharm-estimate-cost 
    """

    print("Building grid: {}, a = {}, {}x{}x{} to r_out of {}".format(
        coords, spin, n1, n2, n3, r_out))

    G = grid.make_some_grid(coords, n1, n2, n3, a=spin, r_out=r_out, cache_conn=False)

    dt = G.dt_light()

    print("Assuming light-crossing dt: {}, total steps: {}".format(dt, time/dt))
    # zc_total = tf/dt*n1*n2*n3
    # print("Total ZC estimate: {:g}".format(zc_total))

    # TODO allow named or spec'd perf model
    # print("\nCampaign estimates:")
    # zones_per_node = n1*n2*n3/nodes
    # perf = kharma_perf(zones_per_node)
    # time_h = zc_total/perf/60/60
    # print("KHARMA relative performance: {}%".format(perf/nodes/17e6*100))
    # print("KHARMA: ", time_h, "hours,", time_h/12, "jobs", time_h*nodes/6, "node-h")
    # perf = grim_perf(zones_per_node)
    # time_h = zc_total/perf/60/60
    # print("GRIM relative performance: {}%".format(perf/nodes/3e5*100))
    # print("GRIM: ", time_h, "hours,", time_h/12, "jobs", time_h*nodes/6, "node-h")

if __name__ == "__main__":
    estimate_cost()
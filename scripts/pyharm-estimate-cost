#!/usr/bin/env python3

__license__ = """
 File: pyharm-estimate-cost
 
 BSD 3-Clause License
 
 Copyright (c) 2020-2023, Ben Prather and AFD Group at UIUC
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 
 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 
 3. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""


import sys
import numpy as np
import click

import pyharm.grid as grid

# TODO add multizone?

@click.command()
@click.option('-g', '--gridsize', default="384x192x192", help="Grid size (base grid if AMR)")
@click.option('-b', '--blocksize', default="384x192x192", help="Block size")
@click.option('-d', '--dumpsize', default="512x256x512", help="Interpolated dump size")
@click.option('-nb', '--nblocks', default=1, help="Number of blocks")
@click.option('-tf', '--time', default=10000, help="Simulation time in t_g")
@click.option('-n', '--nodes', default=1, help="Number of nodes performing simulation")
@click.option('-c', '--coords', default='fmks', help="Grid coordinate system")
@click.option('--r_out', default=1000., help="Simulation outer radius")
@click.option('-a', '--spin', default=0.5, help="BH spin a_*")
@click.option('-p', '--perf', default=100, help="Performance before weak scaling, million ZCPS")
@click.option('-w', '--weak_scaling', default=0.9, help="Weak scaling of performance with node count")
def estimate_cost(gridsize, blocksize, dumpsize, nblocks, time, nodes, coords, r_out, spin, perf, weak_scaling):
    """Script to calculate how many zone-cycles are required to complete a simulation.

    Note that current estimates use weak scaling only (suitable for SMR with known blocksize, for example).
    Would need a perf(zones/GPU) model in order to predict strong-scaled performance.
    """

    n1, n2, n3 = [int(x) for x in gridsize.split("x")]
    n1b, n2b, n3b = [int(x) for x in blocksize.split("x")]
    n1d, n2d, n3d = [int(x) for x in dumpsize.split("x")]

    print("Building grid: {}, a = {}, {}x{}x{} to r_out of {}".format(
        coords, spin, n1, n2, n3, r_out))

    G = grid.make_some_grid(coords, n1, n2, n3, a=spin, r_out=r_out, cache_conn=False)

    dt = G.dt_light()

    n_steps = time/dt
    print("Assuming light-crossing dt: {}, total steps: {}".format(dt, n_steps))
    n_zones = nblocks * n1b*n2b*n3b
    zc_total = n_steps * n_zones
    print("Total ZC estimate: {:g}".format(zc_total))

    print("\nCampaign estimates:")
    node_perf = perf*1e6
    ideal_nh = zc_total / node_perf /60/60
    print("Ideal cost (node-h): {}".format(ideal_nh))
    total_perf = node_perf * nodes**weak_scaling
    job_h = zc_total/total_perf/60/60
    real_nh = nodes * job_h
    step_time = job_h*60*60 / n_steps
    print("Job wallclock hours: {}, step time {}s".format(job_h, step_time))
    print("Real node-hours: {} (relative performance: {}%)".format(real_nh, int(ideal_nh/real_nh*100)))

    dump_size = 4*8*n_zones/1024**3
    small_dump_size = 4*8*n1d*n2d*n3d/1024**3
    print("Full dump size: {}GB every {} steps ({}s)".format(dump_size, 5/dt, 5/dt*step_time))
    print("Total initial size: {}GB, keep {}GB".format(dump_size * time/5, dump_size * time/50))
    print("Small dump size: {}GB, total {}GB".format(small_dump_size, small_dump_size*time/5))


if __name__ == "__main__":
    estimate_cost()
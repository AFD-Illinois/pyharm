#!/usr/bin/env python3

__license__ = """
 File: pyharm-write-grid
 
 BSD 3-Clause License
 
 Copyright (c) 2020-2023, Ben Prather and AFD Group at UIUC
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 
 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 
 3. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import click
from pyharm import grid
from pyharm.io import read_hdr
import pyharm.io.gridfile as gridfile

@click.command()
@click.argument('file', nargs=1, type=click.Path(exists=True), required=False)
@click.option('-c', '--coords', default='fmks', help="Coordinate SYSTEM in {fmks, mks, eks, ks, mks3, etc.}")
@click.option('-s', '--spin', default=0.9375, help="Spin of the black hole")
@click.option('--r_out', default=1000., help="Outer radius in r_g")
@click.option('--r_in', is_flag=True, help="Inner radius in r_g")
@click.option('-n1', '--n1', default=192, nargs=1)
@click.option('-n2', '--n2', default=128, nargs=1)
@click.option('-n3', '--n3', default=128, nargs=1)
# Common options
@click.option('-o', '--outfile', default="grid.h5", help="Output file.")
@click.option('-vis', '--vis', is_flag=True, help="Whether to write to ebhlight/visualization format.")
@click.version_option(package_name='pyharm')
def write_some_grid(file, coords, spin, r_out, n1, n2, n3, outfile, vis):
    """Script to write files listing geometry information at each cell of a spherical simulation grid.
    Used to avoid recalculating boring things like the metric, metric determinant, etc.
    Won't match iharm3d's grids bit-for-bit in gcon due to inversions, but should in all other variables.

    \b
    Usage: pyharm write-grid FILE.{phdf,h5} 
    Writes a grid file using parameters for the simulation, given a dump of the simulation output

    \b
    OR: pyharm write-grid [SYSTEM OPTIONS]
    Writes a grid of given parameters and size:
    1. Coordinate SYSTEM in {fmks, mks, eks, ks, mks3, etc.}.
    2. SPIN of BH. Default 0.9375.
    3. R_OUT representing domain outer edge in r_g, default 1000.  Inner radius r_in will be determined
       in the same way as (modern! See relevant bug in ebhlight) HARM-like codes, putting 5 zones inside EH
    4. Grid size. Default 192x128x128
    5. Filename
    """

    # Read the header data of a given file to a dictionary
    make_system = True
    if ".phdf" in file_or_system or ".h5" in file_or_system:
        try:
            header = read_hdr(file_or_system)
            # Generate a grid from the header
            G = grid.Grid(header, cache_conn=True)
            make_system = False

        except IOError:
            print("Could not read first argument as file, assuming grid parameters as arguments.")
            make_system = True

    if make_system:
        # Not a valid file -> user specified grid parameters instead
        print("Building grid: {}, a = {}, {}x{}x{} to r_out of {}".format(
              file_or_system, spin, n1, n2, n3, r_out))
        # Only need connection coeffs for vis grids
        G = grid.make_some_grid(file_or_system, n1, n2, n3, a=spin, r_out=r_out, cache_conn=vis)

    print("Grid startx: ", G.startx)
    print("Grid stopx: ", G.stopx)
    print("Grid metric/coordinates {}, a={}, hslope={}".format(type(G.coords), G.coords.a, G.coords.hslope))
    print("Writing to file ", outfile)

    if vis:
        gridfile.write_vis_grid(G, outfile)
    else:
        gridfile.write_grid(G, fname=outfile)

if __name__ == "__main__":
    write_some_grid()

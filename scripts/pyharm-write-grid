#!/usr/bin/env python3

import click
from pyharm import grid
from pyharm.io import read_hdr
import pyharm.io.gridfile as gridfile

@click.command()
@click.argument('file_or_system', nargs=1)
@click.argument('spin', default=0.9375, nargs=1)
@click.argument('r_out', default=1000., nargs=1)
@click.argument('n1', default=192, nargs=1)
@click.argument('n2', default=128, nargs=1)
@click.argument('n3', default=128, nargs=1)
# Common options
@click.option('-o', '--outfile', default="grid.h5", help="Output file.")
@click.option('-vis', '--vis', is_flag=True, help="Whether to write to ebhlight/visualization format.")
def write_some_grid(file_or_system, spin, r_out, n1, n2, n3, outfile, vis):
    """Script to write files listing geometry information at each cell of a simulation.
    Used to avoid recalculating boring things like the metric, metric determinant, etc.
    Won't match iharm3d's grids bit-for-bit in gcon due to inversions, but should in all other variables.

    \b
    Usage: write_grid.py FILE.{phdf,h5} 
    Writes a grid file using parameters for the simulation, given a dump of the simulation output

    \b
    Usage: write_grid.py SYSTEM SPIN R_OUT [N1 N2 N3]
    Writes a grid of given parameters and size:
    1. Coordinate SYSTEM in {fmks, mks, eks, ks, mks3, etc.}.
    2. SPIN of BH. Default 0.9375.
    3. R_OUT representing domain outer edge in r_g, default 1000.  Inner radius r_in will be determined
       in the same way as (modern! See relevant bug in ebhlight) HARM-like codes, putting 5 zones inside EH
    4. Grid size. Default 192x128x128
    5. Filename
    """

    # Read the header data of a given file to a dictionary
    make_system = True
    if ".phdf" in file_or_system or ".h5" in file_or_system:
        try:
            header = read_hdr(file_or_system)
            # Generate a grid from the header
            G = grid.Grid(header, cache_conn=True)
            make_system = False

        except IOError:
            print("Could not read first argument as file, assuming grid parameters as arguments.")
            make_system = True

    if make_system:
        # Not a valid file -> user specified grid parameters instead
        print("Building grid: {}, a = {}, {}x{}x{} to r_out of {}".format(
              file_or_system, spin, n1, n2, n3, r_out))
        # Only need connection coeffs for vis grids
        G = grid.make_some_grid(file_or_system, n1, n2, n3, a=spin, r_out=r_out, cache_conn=vis)

    print("Grid startx: ", G.startx)
    print("Grid stopx: ", G.stopx)
    print("Grid metric/coordinates {}, a={}, hslope={}".format(type(G.coords), G.coords.a, G.coords.hslope))
    print("Writing to file ", outfile)

    if vis:
        gridfile.write_vis_grid(G, outfile)
    else:
        gridfile.write_grid(G, fname=outfile)

if __name__ == "__main__":
    write_some_grid()

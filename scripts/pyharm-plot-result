#!/usr/bin/env python3

__license__ = """
 File: pyharm-plot-result
 
 BSD 3-Clause License
 
 Copyright (c) 2020-2023, Ben Prather and AFD Group at UIUC
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 
 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 
 3. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from argparse import ArgumentError
import sys
import glob
import click
import inspect
import textwrap

import numpy as np
import matplotlib.pyplot as plt

import pyharm
from pyharm.plots import result_figures
from pyharm.defs import Loci

# This extends the help message to print valid plots
class ExtensibleCmd(click.Command):
    def format_help(self, ctx, formatter):
        click.Command.format_help(self, ctx, formatter)

        figure_list = inspect.getmembers(result_figures, \
                predicate=lambda f: inspect.isfunction(f) and f.__module__ == result_figures.__name__)

        formatter.write("\nValid figures:\n")
        for fnname, fn in figure_list:
            if fnname[0] != "_":
                formatter.write("  "+fnname+":\n")
                if result_figures.__dict__[fnname].__doc__ is not None:
                    # Take out all whitespace from the docstring
                    docstring = textwrap.shorten(result_figures.__dict__[fnname].__doc__, 1e6).replace("\n"," ")
                    # Reflow and indent
                    formatter.write(textwrap.indent(textwrap.fill(docstring), "    ") + "\n\n")

@click.command(cls=ExtensibleCmd)
@click.argument('plot_type', nargs=1)
@click.argument('files', nargs=-1, type=click.Path(exists=True))
@click.option('-v', '--varlist', default=None, help="Comma-separated list of variables to use")
@click.option('--model_prefix', default="", help="String to prepend to all model names (e.g. GRMHD run parameters)")
@click.option('--tag', default="", help="String to add to output plot names")
# Bounds
@click.option('--xmax', default=None, help="X-axis maximum")
@click.option('--xmin', default=None, help="X-axis minimum")
@click.option('--ymax', default=None, help="Y-axis maximum")
@click.option('--ymin', default=None, help="Y-axis minimum")
# Time bounds
@click.option('--avg_min', default=None, help="Time-average minimum. Negative value counts backward from end of run")
@click.option('--avg_max', default=None, help="Time-average maximum")
@click.option('--by_window', is_flag=True, help="Plot a point or line for each window of a series")
# Output
@click.option('-pdf', '--pdf', is_flag=True, help="Output to .pdf file rather than .png image")
@click.option('--fig_x', default=None, help="Figure width in inches")
@click.option('--fig_y', default=None, help="Figure height in inches")
@click.version_option(package_name='pyharm')
def plot_results(plot_type, files, **kwargs):
    """Plot a result or set of results in a standard form, usually the contents of one or more
    analyses done by pyharm-analysis.

    Usage: pyharm-plot-result plot_type [options] file1.h5 [file2.h5 ...]
    """
    
    # TODO click does lists
    if kwargs['varlist'] is not None:
        kwargs['varlist'] = kwargs['varlist'].split(",")

    # Always load results
    results = [pyharm.load_result(f) for f in files]

    # Hack to get the list of functions in current file,
    # so we can call them based on runtime user-spec string
    figure_list = inspect.getmembers(result_figures, \
            predicate=lambda f: inspect.isfunction(f) and f.__module__ == result_figures.__name__)
    local_fns = {}
    for fnname, fn in figure_list:
        local_fns[fnname] = fn

    # If this is a local single-result function, just plot it for everything
    if plot_type in local_fns.keys():
        figs = result_figures.__dict__[plot_type](results, kwargs=kwargs)
    else:
        print("ERROR: Cannot make plot: {}".format(plot_type))
        exit(-1)

    # Allow, but do not require, returning multiple figures
    try:
        figs[0]
    except:
        figs = [figs]
    for fig in figs:
        # Any other closing/format stuff
        for ax in fig.get_axes():
            ax.set_xlim(kwargs['xmin'],  kwargs['xmax'])
            ax.set_ylim(kwargs['ymin'],  kwargs['ymax'])

        # User tag, then fn, then extension
        if len(results) == 1:
            out_name = kwargs['tag'].rstrip("_")+"_"+plot_type+results[0].tag
        else:
            out_name = kwargs['tag'].rstrip("_")+"_"+plot_type

        fig.savefig(out_name+(".pdf" if kwargs['pdf'] else ".png"), dpi=200)
        plt.close(fig)

if __name__ == "__main__":
    plot_results()


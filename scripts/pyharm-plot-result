#!/usr/bin/env python3

from argparse import ArgumentError
import sys
import glob
import click
import inspect
import textwrap

import numpy as np
import matplotlib.pyplot as plt

import pyharm
from pyharm.plots import result_figures
from pyharm.defs import Loci

# This extends the help message to print valid plots
class ExtensibleCmd(click.Command):
    def format_help(self, ctx, formatter):
        click.Command.format_help(self, ctx, formatter)

        figure_list = inspect.getmembers(result_figures, \
                predicate=lambda f: inspect.isfunction(f) and f.__module__ == result_figures.__name__)

        formatter.write("\nValid figures:\n")
        for fnname, fn in figure_list:
            if fnname[0] != "_":
                formatter.write("  "+fnname+":\n")
                if result_figures.__dict__[fnname].__doc__ is not None:
                    # Take out all whitespace from the docstring
                    docstring = textwrap.shorten(result_figures.__dict__[fnname].__doc__, 1e6).replace("\n"," ")
                    # Reflow and indent
                    formatter.write(textwrap.indent(textwrap.fill(docstring), "    ") + "\n\n")

@click.command(cls=ExtensibleCmd)
@click.argument('to_plot_str', nargs=1)
@click.argument('paths', nargs=-1, type=click.Path(exists=True))
@click.option('-f', '--result_fname', default="eht_out.h5", help="Filename (not full path) of each results file")
@click.option('-v', '--varlist', default=None, help="Comma-separated list of variables to use")
@click.option('--tag', default="", help="String to add to output plot names")
# Bounds
@click.option('--xmax', default=None, help="X-axis maximum")
@click.option('--xmin', default=None, help="X-axis minimum")
@click.option('--ymax', default=None, help="Y-axis maximum")
@click.option('--ymin', default=None, help="Y-axis minimum")
# Time bounds
@click.option('--avg_min', default=None, help="Time-average minimum. Negative value counts backward from end of run")
@click.option('--avg_max', default=None, help="Time-average maximum")
@click.option('--by_window', is_flag=True, help="Plot a point or line for each window of a series")
# Output
@click.option('-pdf', '--pdf', is_flag=True, help="Output to pdf rather than png")
@click.option('--fig_x', default=None, help="Figure width in inches")
@click.option('--fig_y', default=None, help="Figure height in inches")
def plot_results(to_plot_str, paths, **kwargs):
    """Plot a result or set of results in a standard form, usually the contents of one or more
    analyses done by pyharm-analysis.

    Current plots: eh_fluxes,radial_averages_window,radial_fluxes_window,disk_momentum

    Usage: pyharm-plot-result  list,of,names folder1 [folder2]
    """
    to_plot = to_plot_str.split(",")
    if kwargs['varlist'] is not None:
        kwargs['varlist'] = kwargs['varlist'].split(",")

    # Always load results
    results = pyharm.load_results_glob(paths, kwargs['result_fname'])

    print("Read {} results".format(len(results)))

    # Hack to get the list of functions in current file,
    # so we can call them based on runtime user-spec string
    figure_list = inspect.getmembers(result_figures, \
            predicate=lambda f: inspect.isfunction(f) and f.__module__ == result_figures.__name__)
    local_fns = {}
    for fnname, fn in figure_list:
        local_fns[fnname] = fn

    # Iterate over individual plots
    for plotname in to_plot:
        # If this is a local single-result function, just plot it for everything
        if plotname in local_fns.keys():
            result_figures.__dict__[plotname](results, kwargs=kwargs)
        else:
            print("ERROR: Cannot make plot: {}".format(plotname))

    # Any other closing/format stuff. PDF format, etc, etc
    for ax in fig.get_axes():
        ax.set_xlim(kwargs['xmin'],  kwargs['xmax'])
        ax.set_ylim(kwargs['ymin'],  kwargs['ymax'])
    plt.subplots_adjust(wspace=0.4)
    # Underscore-separate things
    if kwargs['tag'] != "":
        kwargs['tag'] += "_"
    # User tag, then fn, then extension
    if kwargs['pdf']:
        plt.savefig(kwargs['tag']+tag+".pdf", dpi=200)
    else:
        plt.savefig(kwargs['tag']+tag+".png", dpi=200)
    plt.close(fig)

if __name__ == "__main__":
    plot_results()


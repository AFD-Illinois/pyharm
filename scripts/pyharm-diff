#!/usr/bin/env python3

__license__ = """
 File: pyharm-diff
 
 BSD 3-Clause License
 
 Copyright (c) 2020-2023, Ben Prather and AFD Group at UIUC
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 
 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 
 3. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""


import pyharm
from pyharm import parameters
import pyharm.plots.plot_dumps as pplt
import pyharm.util as util

import sys
import click
import numpy as np
import matplotlib.pyplot as plt

@click.command()
@click.argument('dump1file', nargs=1, type=click.Path(exists=True))
@click.argument('dump2file', nargs=1, type=click.Path(exists=True))
# Common options
@click.option('-o', '--out_name', default=None, help="Base name of output images.")
@click.option('-g', '--ghost_zones', is_flag=True, help="Compare ghost zones.")
@click.option('--fig_x', default=20.0, help="Figure width in inches.")
@click.option('--fig_y', default=20.0, help="Figure height in inches.")
@click.option('--xmin', default=None, help="Window X minimum.")
@click.option('--xmax', default=None, help="Window X maximum.")
@click.option('--ymin', default=None, help="Window Y minimum.")
@click.option('--ymax', default=None, help="Window Y maximum.")
@click.option('--bh', default=True, help="Whether to show the BH shadow.")
@click.option('--array', is_flag=True, help="Use array coordinates")
@click.option('--vmax', default=None, help="Max comparison plot value")
# TODO default none and autodetect
@click.option('--vars', default=None, help="Comma-separated list of variables to compare")
@click.option('-a', '--absolute', is_flag=True, help="Plot absolute differences, rather than relative.")
@click.option('--rel_tol', default=5e-10, help="Relative tolerance to consider a variable different.")
@click.option('--abs_tol', default=1e20, help="Absolute tolerance to consider a variable different.")
@click.option('--geometry', is_flag=True, help="Compare domain sizes & shapes.")
@click.option('--no_plot', is_flag=True, help="Don't plot differences, just print & return.")
def diff(dump1file, dump2file, **kwargs):
    """Plot the differences between two GRMHD output files and test for similarity.

    Note that by default, this doesn't check every single GRMHD variable. You can specify more file
    variables (or derived variables) in a list in the 'vars' parameter.

    Other variables should be self-explanatory.
    """
    if kwargs['out_name'] is not None:
        imname = kwargs['out_name']
    else:
        imname = "diff_"+'.'.join(dump1file.split('.')[:-1])+'.'.join(dump2file.split('.')[:-1])

    dump1 = pyharm.load_dump(dump1file, ghost_zones=kwargs['ghost_zones'])
    #Hopefully this fails for dumps that shouldn't be compared
    dump2 = pyharm.load_dump(dump2file, ghost_zones=kwargs['ghost_zones'])

    kwargs['vmin'] = 1e-5
    if 'vmax' not in kwargs and not kwargs['absolute']:
        kwargs['vmax'] = 1

    if kwargs['array']:
        kwargs['native'] = True
        kwargs['shading'] = 'flat'
        kwargs['half_cut'] = True
        kwargs['window'] = None

    kwargs['log'] = True

    return_code = 0

    # TODO if vars is none get list...
    if kwargs['vars'] is None:
        vars = dump1.params['prim_names']
    else:
        vars = kwargs['vars'].split(",")

    for var in vars:
        l1_norm = np.sum(np.abs(dump1[var] - dump2[var])) / np.sum(np.abs(dump1[var]))
        if l1_norm > kwargs['rel_tol']:
            print("Outputs disagree in {}: normalized L1: {}".format(var, l1_norm))
            return_code = 1

    if not kwargs['no_plot']:
        # Always do XZ
        fig, _ = plt.subplots(3, 3, figsize=(kwargs['fig_x'], kwargs['fig_y']))
        axes = fig.get_axes()
        for var, ax in zip(vars, axes):
            pplt.plot_diff_xz(ax, dump1, dump2, var, **kwargs)
            ax.set_xlabel('')
            ax.set_ylabel('')

        plt.tight_layout()
        plt.savefig(imname+"_xz.png", dpi=100)
        plt.close(fig)

        # Do XY if not 2D
        if dump1['n3'] > 1:
            fig, _ = plt.subplots(3, 3, figsize=(kwargs['fig_x'], kwargs['fig_y']))
            axes = fig.get_axes()
            for var,ax in zip(vars, axes):
                pplt.plot_diff_xy(ax, dump1, dump2, var, **kwargs)
                ax.set_xlabel('')
                ax.set_ylabel('')

            plt.tight_layout()
            plt.savefig(imname+"_xy.png", dpi=100)
            plt.close(fig)

    if kwargs['geometry']:
        print(dump1.grid.startx, dump2.grid.startx)
        print(dump1.grid.stopx, dump2.grid.stopx)
        print(dump1.grid.dx, dump2.grid.dx)
        print(dump1.params['a'], dump2.params['a'])
        if 'hslope' in dump1.params:
            print(dump1.params['hslope'], dump2.params['hslope'])
        if 'mks_smooth' in dump1.params:
            print(dump1.params['mks_smooth'], dump2.params['mks_smooth'])
            print(dump1.params['poly_xt'], dump2.params['poly_xt'])
            print(dump1.params['poly_alpha'], dump2.params['poly_alpha'])
            print(dump1.params['poly_norm'], dump2.params['poly_norm'])

    exit(return_code)

if __name__ == "__main__":
    diff()

#!/usr/bin/env python3

__license__ = """
 File: pyharm-movie
 
 BSD 3-Clause License
 
 Copyright (c) 2020-2023, Ben Prather and AFD Group at UIUC
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 
 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 
 3. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""


import os, sys
import click
import glob
import psutil
import multiprocessing
import warnings
import inspect
import textwrap

import numpy as np
import pandas
# Make sure we use Agg
import matplotlib
matplotlib.use('Agg')

import pyharm
from pyharm.plots.frame import frame
from pyharm.parallel import calc_nthreads

# Use mpi4py if available, or multiprocessing
try:
    import mpi4py
    from mpi4py import MPI
    from mpi4py.futures import MPICommExecutor, MPIPoolExecutor
    if MPI.COMM_WORLD.Get_rank() == 0:
        print("MPI Available", file=sys.stderr)
    # Use MPI unless we're alone
    use_mpi = (MPI.COMM_WORLD.Get_size() > 1)
    def do_out():
        return MPI.COMM_WORLD.Get_rank() == 0
except ImportError:
    use_mpi = False
    def do_out():
        return True

# This extends the help message to print valid movies
class ExtensibleCmd(click.Command):
    def format_help(self, ctx, formatter):
        click.Command.format_help(self, ctx, formatter)

        figure_list = inspect.getmembers(pyharm.plots.figures, \
                predicate=lambda f: inspect.isfunction(f) and f.__module__ == pyharm.plots.figures.__name__)

        formatter.write("\nValid movies:\n")
        for fnname, fn in figure_list:
            if fnname[0] != "_":
                formatter.write("  "+fnname+":\n")
                if pyharm.plots.figures.__dict__[fnname].__doc__ is not None:
                    # Take out all whitespace from the docstring
                    docstring = textwrap.shorten(pyharm.plots.figures.__dict__[fnname].__doc__, 1e6).replace("\n"," ")
                    # Reflow and indent
                    formatter.write(textwrap.indent(textwrap.fill(docstring), "    ") + "\n\n")
        formatter.write("\n...or any valid key consisting of a variable and any operations.\n")

@click.command(cls=ExtensibleCmd)
@click.argument('movie_types', nargs=1)
@click.argument('paths', nargs=-1, type=click.Path(exists=True))
# Common options
@click.option('-s', '--tstart', default=None, help="Start time.")
@click.option('-e', '--tend', default=None, help="End time.")
@click.option('-n', '--nthreads', default=None, help="Number of processes to use, if not using MPI")
@click.option('-o', '--output_dir', default=".", help="Base directory for outputs. Any folder structure of models will be preserved.")
@click.option('--multizone', is_flag=True, help="Image a multizone run.  Call on each run folder separately!")
@click.option('--nodiag', is_flag=True, help="Don't load a history/diagnostic text file")
# Figure options
@click.option('--fig_x', default=16.0, help="Figure width in inches.")
@click.option('--fig_y', default=9.0, help="Figure height in inches.")
@click.option('--fig_dpi', default=100, help="DPI of resulting figure.")
@click.option('--left', default=0.07, help="Left side padding of figure (as in subplots_adjust).")
@click.option('--right', default=0.93, help="Right side padding of figure (as in subplots_adjust).")
@click.option('--bottom', default=None, help="Bottom padding of figure (as in subplots_adjust).")
@click.option('--top', default=None, help="Top padding of figure (as in subplots_adjust).")
@click.option('--wspace', default=None, help="Width spacing between plots in figure (as in subplots_adjust).")
@click.option('--hspace', default=None, help="Height spacing between plots in figure (as in subplots_adjust).")
@click.option('--no_title', is_flag=True, help="Omit a plot title e.g. of simulation time.")
# Dump file plotting options
@click.option('-g','--ghost_zones', is_flag=True, help="Plot ghost zones.")
@click.option('-at','--at','--at_zone', 'at', default=0, help="Phi zone to plot at.")
@click.option('-av','--av','--average', 'average', is_flag=True, help="Average quantities over phi.")
@click.option('--sum', is_flag=True, help="Sum quantities over phi.")
@click.option('-sh','--sh','--shading', 'shading', default='flat', help="Shading: flat, nearest, gouraud.")
@click.option('--vmin', default=None, help="Colorscale minimum.")
@click.option('--vmax', default=None, help="Colorscale maximum.")
@click.option('--cmap', default='jet', help="Colormap.")
@click.option('--log', is_flag=True, help="Plot natural log of the specified variable. Colorbar is properly marked vs prepending log_")
@click.option('-sz','--sz','--size', 'size', default=None, help="Window size, in M each side of central object.")
@click.option('--xmin', default=None, help="Window X minimum.")
@click.option('--xmax', default=None, help="Window X maximum.")
@click.option('--ymin', default=None, help="Window Y minimum.")
@click.option('--ymax', default=None, help="Window Y maximum.")
@click.option('--log_r', is_flag=True, help="Make the plots logarithmic in radius.")
@click.option('--overlay_field', is_flag=True, help="Overlay field lines.")
@click.option('--nlines', default=20, help="Number of total field lines to overlay.")
@click.option('--overlay_grid', is_flag=True, help="Overlay simulation zone borders.")
@click.option('--overlay_grid_spacing', default=1, help="Only plot grid every X lines.")
@click.option('--overlay_blocks', is_flag=True, help="Overlay simulation block borders.")
@click.option('--native', is_flag=True, help="Plot in native coordinates X1,X2,X3 rather than converting to Cartesian.")
@click.option('--bh/--no-bh', default=True, help="Whether to show the BH shadow.")
@click.option('--no_grid_cache', is_flag=True, help="Don't cache geometry.  For plotting large Cartesian simulations.")
@click.option('--prefer_iharm3d', is_flag=True, help="Prefer iharm3d-format files if available alongside KHARMA output")
# Extras
@click.option('--accurate_fnames', is_flag=True, help="Name frames by 1/100M, for short runs.")
@click.option('--numeric_fnames', is_flag=True, help="Name frames by file number.")
@click.option('-r', '--resume', is_flag=True, help="Continue a previous run, by skipping existing frames")
@click.option('-d', '--debug', is_flag=True, help="Serial operation for debugging")
@click.option('--nompi', is_flag=True, help="Avoid MPI even if available")
#@click.option('-m', '--memory_limit', default=1, help="Memory limit in GB for each process, enforced by starting total/m processes.")
@click.version_option(package_name='pyharm')
def movie(movie_types, paths, **kwargs):
    """Generate movies of type MOVIE_TYPE from dumps at each of PATHS.

    "Movies" are generated as collections of frames in .png format, named frame_tXXXXXXXX.png by simulation time in M,
    and placed in a subdirectory "frames_MOVIE_TYPE" of the given PATH.  One can easily generate a single .mp4 movie
    from these using ffmpeg or similar, see 'scripts/batch/' for examples.

    Each PATH can contain dump files in any format readable by pyharm, either in the given directory or a subdirectory
    named "dumps", "dumps_kharma" or similar.

    MOVIE_TYPE can be any variable known to pyharm (see README, variables.py) or any "figure" function in figures.py, listed below.
    A common first movie is 'log_rho', for example, which will plot phi=0 toroidal and midplane poloidal slices of the log base 10
    of the density. You can create mutiple movies using a comma-separated list without spaces, e.g. 'log_rho,traditional'.

    If run within an MPI job/allocation with mpi4py installed, movie.py will attempt to use all allocated nodes to generate
    frames.  YMMV wildly with MPI installations, with mpi4py installed via pip generally a better choice than through conda.
    """
    path_dirs = [p for p in paths if os.path.isdir(p)]
    if len(path_dirs) == 0:
        # Single file arguments.  Signal to treat as one movie.
        path_dirs = [None]
    if do_out(): print("Generating ",len(path_dirs)*len(movie_types.split(","))," movie(s)", file=sys.stderr)

    start_path = os.path.abspath(os.getcwd())
    if 'PYHARM_DUMPS_DIR' in os.environ:
        base_path = os.path.abspath(os.environ['PYHARM_DUMPS_DIR'])
    else:
        base_path = start_path
    if 'PYHARM_OUTPUT_DIR' in os.environ and kwargs['output_dir'] == ".":
        out_path = os.path.abspath(os.environ['PYHARM_OUTPUT_DIR'])
    else:
        # Defaults to current dir
        out_path = os.path.abspath(kwargs['output_dir'])

    for path in path_dirs:
        if path is None:
            # We passed in a bunch of files as one movie
            files = paths
        # If a path...
        elif os.path.isdir(path):
            # change dir to path we want to image
            os.chdir(path)
            # Try to load known filenames
            files = pyharm.io.get_fnames(".", prefer_iharm3d=kwargs['prefer_iharm3d'])
        else:
            # One file amid directories
            files = [path]

        # Timestamp formatting: appropriate left padding...
        if kwargs['tend'] is None:
            kwargs['time_digits'] = int(np.log10(pyharm.io.get_dump_time(files[-1])+1))+1
        else:
            kwargs['time_digits'] = int(np.log10(float(kwargs['tend'])))+1
        # ...and automatically make times accurate to hundredths if t_end < 100
        if kwargs['time_digits'] < 3:
            kwargs['accurate_fnames'] = True

        # Add these so we can pass on just the kwargs object to worker function
        kwargs['movie_types'] = movie_types
        kwargs['path'] = path
        # Include where to output: what to replace from cwd, and what with
        kwargs['base_path'] = base_path
        kwargs['out_path'] = out_path

        for movie_type in movie_types.split(","):
            frame_dir = os.path.join(os.getcwd().replace(base_path, out_path), "frames_"+movie_type)
            os.makedirs(frame_dir, exist_ok=True)

        # Option to avoid loading diag file since not everything needs it
        if kwargs['nodiag']:
            diag = None
        else:
            try:
                # Load diagnostics from post-processing file
                fname = None
                if len(glob.glob("eht_out.h5")) > 0:
                    fname = glob.glob("eht_out.h5")[0]
                if fname is not None:
                    if do_out(): print("Loading diag file {}".format(fname), file=sys.stderr)
                    diag = pyharm.io.read_log(fname)
                else:
                    diag = None
            except (IOError, pandas.errors.ParserError):
                    diag = None

            if diag is None:
                try:
                    # Load diagnostics from HARM itself
                    fname = None
                    if len(glob.glob("*.hst")) > 0:
                        fname = glob.glob("*.hst")[0]
                    elif len(glob.glob("*/*.hst")) > 0:
                        fname = glob.glob("*/*.hst")[0]
                    if fname is not None:
                        if do_out(): print("Loading diag file {}".format(fname), file=sys.stderr)
                        diag = pyharm.io.read_log(fname)
                    else:
                        diag = None
                except (IndexError, IOError, pandas.errors.ParserError):
                    diag = None

        if do_out(): print("Imaging model {} with movie {}".format(path, movie_type), file=sys.stderr)
        if 'debug' in kwargs and kwargs['debug']:
            # Import profiling only if used, start it
            import cProfile, pstats, io
            from pstats import SortKey
            from pympler import tracker
            pr = cProfile.Profile()
            pr.enable()
            # Run sequentially to make profiling & backtraces work
            for fname in files:
                tr = tracker.SummaryTracker()
                frame(fname, diag, kwargs)
                tr.print_diff()

            pr.disable()
            s = io.StringIO()
            ps = pstats.Stats(pr, stream=s).sort_stats(SortKey.TIME)
            ps.print_stats(10)
            print(s.getvalue())

        else:
            # Suppress math warnings for e.g. log(-)
            if not sys.warnoptions:
                warnings.simplefilter("ignore")
            # Try to guess how many processes before we MemoryError out
            if 'nthreads' not in kwargs or kwargs['nthreads'] is None:
                if 'memory_limit' in kwargs and kwargs['memory_limit'] is not None:
                    hdr = pyharm.io.read_hdr(files[0])
                    nthreads = min(calc_nthreads(hdr, pad=0.6),
                                psutil.cpu_count())
                else:
                    nthreads = psutil.cpu_count()
            else:
                nthreads = int(kwargs['nthreads'])

            # Only use as many processes at files
            nthreads = min(nthreads, len(files))

            # This application is entirely side-effects (frame creation)
            # So we map & ignore result
            if use_mpi and not kwargs['nompi']:
                print("Using MPI")
                # Everything is set by MPI.  We inherit a situation and use it
                with MPICommExecutor() as executor:
                    if executor is not None:
                        print("Imaging {} files across pool size {}".format(len(files), MPI.COMM_WORLD.Get_size()), file=sys.stderr)
                        executor.map(frame, files, (diag,)*len(files), (kwargs,)*len(files))
            else:
                print("Using {} processes".format(nthreads))
                with multiprocessing.Pool(nthreads) as pool:
                    args = zip(files, (diag,)*len(files), (kwargs,)*len(files))
                    pool.starmap_async(frame, args).get(720000)

        if do_out(): print("Imaged model {} with movie(s) {}".format(path, movie_types), file=sys.stderr)

        # Change back to wherever our root was, argument paths can be relative
        os.chdir(start_path)

if __name__ == "__main__":
    movie()
